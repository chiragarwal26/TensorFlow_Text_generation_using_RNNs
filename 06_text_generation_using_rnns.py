# -*- coding: utf-8 -*-
"""06_Text_Generation_using_RNNs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V4QjxtGQp2hjy5sDcskVY7W6ctCjV8jD

# RNNs Romeo Juleit Play Generator
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x # this line is not required unless you  r in a notebook
from keras.preprocessing import sequence
import keras
import tensorflow as tf
import os
import numpy as np

path_to_file = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')

# We can load our own text data also
#just uncomment the below code if you want your own data
######################################################
######################################################
#from google.colab import files
#path_to_file = list(files.upload().keys())[0]

# Read, then decode for py2 compat.
text = open(path_to_file, 'rb').read().decode(encoding='utf-8')
# length of text is the number of characters in it
print(f'Length of text: {len(text)} characters')

# Take a look at the first 250 characters in text
print(text[:250])

"""#ENCODING
since the text isn't encoded
We are going to encode each unique character as a different integer by ourself
"""

# The unique characters in the file
vocab = sorted(set(text))
print(f'{len(vocab)} unique characters')

# Creating a mapping from unique characters to indices
char2idx = {u:i for i , u in enumerate(vocab)}
idx2char = np.array(vocab)

def text_to_int(text):
  return np.array([char2idx[c] for c in text])

text_as_int = text_to_int(text)

# lets have a look at how our text is encoded
print("TEXT : ", text[:13])
print("ENCODED : ", text_to_int(text[:13]))

# Decoding function,  just i n case we want to see text.
def int_to_text(ints):
  try:
    ints = ints.numpy()
  except:
    pass
  return ''.join(idx2char[ints])
print(int_to_text(text_as_int[:13]))

# TRAINING OUR MODEL
# The tarinig example we r preparing will use a seq_length as input
# and a seq_length as O/P where sequence is original sequence shifted one letter to the right
# FOR EXAMPLE : INPUT: Hell || OUTPUT : ello
seq_length = 100 # length of sequence for a training example
example_per_epoch = len(text)//(seq_length+1)
# Create a training examples / targets
char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)

# now we can use the batch method to turn this stream of characters into batches of desired length
sequences = char_dataset.batch(seq_length+1, drop_remainder=True)

def split_input_target(chunk):  # for the example : hello
    input_text = chunk[:-1]  # hell
    target_text = chunk[1:]  # ello
    return input_text, target_text # hell, ello
dataset = sequences.map(split_input_target) # we use map to apply the above funnction to every entry

for x, y in dataset.take(2):
  print("\n\nEXAMPLE\n")
  print("INPUT")
  print(int_to_text(x))
  print("\nOUTPUT")
  print(int_to_text(y))

# Finally We can make our training batches
BATCH_SIZE = 64
VOCAB_SIZE = len(vocab) # vocab is umber of unique characters 
EMBEDDING_DIM = 256
RNN_UNITS = 1024
# Buffer size to shuffle the dataset
# (TF data is designed to work with possibly infinite sequences,
# so it doesn't attempt to shuffle the entire sequence in memory. Instead,
# it maintains a buffer in which it shuffles elements).
BUFFER_SIZE = 10000

data = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

# Buliding our model
# the reason of building our model is to get flexibility
# as for now, our model is trained for batch_size = 64
# as we will generalise the build_model function
# we can change and predict for batch_size = 1 
def build_model(vocab_size, embedding_dim, rnn_units, batch_size):
  model = tf.keras.Sequential([
      tf.keras.layers.Embedding(vocab_size,embedding_dim,
                                batch_input_shape=[batch_size,None]),
      tf.keras.layers.LSTM(rnn_units,
                           return_sequences=True,
                           stateful=True,
                           recurrent_initializer='glorot_uniform'),
      tf.keras.layers.Dense(vocab_size)
  ])
  return model
model = build_model(VOCAB_SIZE,EMBEDDING_DIM, RNN_UNITS, BATCH_SIZE)
model.summary()

# CREATING A LOSS FUNCTION
for input_example_batch, target_example_batch in data.take(1):
    example_batch_predictions = model(input_example_batch) #ask our model for a prediction based on first batch of our training dataset 
    print(example_batch_predictions.shape, "# (batch_size, sequence_length, vocab_size)") #print out the output shape

# We can see that the prediction is an array of 64 arrays
# one for each entry in the batch
print(len(example_batch_predictions))
print(example_batch_predictions)

# lets examine one prediction
pred = example_batch_predictions[0]
print(len(pred))
print(pred)
# notice that this is a 2d array of length 100, where
# each interior array is prediction for the next character
# at each time stamp

# finally we will look at a prediction at first time step
time_pred = pred[0]
print(len(time_pred))
print(time_pred)
# its 65 values representing the probability of each character occuring next.

# if we want to determine predicted character we need 
# to sample the o/p distribution (pick a value based on probability distribution)
sampled_indices = tf.random.categorical(pred, num_samples = 1)

# now we can reshape that array and convert all integers to numbers
# to see the actual characters
sampled_indices = np.reshape(sampled_indices,(1,-1))[0]
predicted_chars = int_to_text(sampled_indices)
# and this is what our model predicted for training sequence 1
predicted_chars

# now we will define a loss function
# so that it can compare the predicted o/p to the expected o/p
# and give us some numeric values representing how close
# those two values were
def loss(labels, logits):
  return tf.keras.losses.sparse_categorical_crossentropy(labels,logits, from_logits = True)

# compiling our model
model.compile(optimizer = 'adam', loss = loss)

# creating checkpoints
# we are going to setup anf configure our model to save checkpoints as it trains
# this will allow us to load our model from a checckpoint and 
# continue training it.

# Directory whr the checkpoints will be saved
checkpoint_dir = './training_checkpoints'
# Name of the checkpoint files
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath = checkpoint_prefix,
    save_weights_only = True
)

# finally we will start training our model
# THE MORE EPOCHS , MORE BETTER OUR MODEL WILL GET IN THIS CASE
# ITS NOT GENERALISED BUT IN THIS CASE, MORE EPOCHS =  BETTER MODEL 
# BECOZ , in these type of models, overfitting is really hard to get
# so you can train your model for more epochs to get better results
history = model.fit(data, epochs=40,callbacks=[checkpoint_callback])

# LOADING THE MODEL
# we will rebuild our mode from a checkpoint using a batch_size = 1
# so that we can feed one piece of text to the model and use it to
# make a prediction
model = build_model(VOCAB_SIZE, EMBEDDING_DIM, RNN_UNITS, batch_size = 1)

# once the model is trained
# to check the latest checkpoint
model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
model.build(tf.TensorShape([1,None]))

# You can uncomment this, if u want to see any checkpoints
# checkpoint_num = 10
# model.load_weights(tf.train.load_checkpoint("./training_checkpoints/ckpt_" + str(checkpoint_num)))
# model.build(tf.TensorShape([1,None]))

def generate_text(model, start_string):
  # evaluation step(generating text using the learned model)

  # number of characters to generate
  num_generate = 800

  # Converting our start string to numbers ( vectorizing )
  input_eval = [char2idx[s] for s in start_string]
  input_eval = tf.expand_dims(input_eval, 0 )

  text_generated = []
  # low temperatures results in more predictable text
  # higher temperatures results in more surprising text
  # experiment to find the best setting
  temperature = 1.0

  # here batch size == 1
  model.reset_states()
  for i in range(num_generate):
    predictions = model(input_eval)
    # remove the batch dimension
    predictions = tf.squeeze(predictions,0)
    # using a categorical distribution to predict the characters returned by the model
    predictions = predictions/temperature
    predicted_id = tf.random.categorical(predictions,num_samples = 1)[-1,0].numpy()

    # we pass the predicted character as next input to the model
    # along with the previous hidden state
    input_eval = tf.expand_dims([predicted_id],0)

    text_generated.append(idx2char[predicted_id])
  return (start_string + ''.join(text_generated))

# run this code and input any string 
# our model will generate text based on the romeo - juliet play its being trained on
inp = input("Type any starting string:  ")
print(generate_text(model, inp))
# I made myself as a character in this play ,for example , :)

